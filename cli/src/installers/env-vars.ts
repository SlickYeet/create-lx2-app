import path from "path"
import fs from "fs-extra"

import { PKG_ROOT } from "@/constants.js"
import { type DatabaseProvider, type Installer } from "@/installers/index.js"

export const envVariablesInstaller: Installer = ({
  projectDir,
  scopedAppName,
  packages,
  databaseProvider,
}) => {
  const usingNextAuth = packages?.nextAuth.inUse
  const usingPrisma = packages?.prisma.inUse

  const usingDb = usingPrisma

  const envContent = getEnvContent(
    !!usingNextAuth,
    !!usingPrisma,
    scopedAppName,
    databaseProvider
  )

  let envFile = ""
  if (usingDb) {
    if (usingNextAuth) {
      envFile = "with-next-auth-db.js"
    } else {
      envFile = "with-db.js"
    }
  } else {
    if (usingNextAuth) envFile = "with-next-auth.js"
  }

  if (envFile !== "") {
    const envSchemaSrc = path.join(
      PKG_ROOT,
      "template/packages/src/env",
      envFile
    )
    const envSchemaDest = path.join(projectDir, "src/env.js")
    fs.copyFileSync(envSchemaSrc, envSchemaDest)
  }

  const envDest = path.join(projectDir, ".env")
  const envExampleDest = path.join(projectDir, ".env.example")

  const _exampleEnvContent = exampleEnvContent + envContent

  // Generate an auth secret and put in .env, not .env.example
  const secret = Buffer.from(
    crypto.getRandomValues(new Uint8Array(32))
  ).toString("base64")
  const _envContent = envContent.replace(
    'AUTH_SECRET=""',
    `AUTH_SECRET="${secret}" # Generated by create-tnt-stack`
  )

  fs.writeFileSync(envDest, _envContent, "utf-8")
  fs.writeFileSync(envExampleDest, _exampleEnvContent, "utf-8")
}

function getEnvContent(
  usingNextAuth: boolean,
  usingPrisma: boolean,
  scopedAppName: string,
  databaseProvider: DatabaseProvider
) {
  let content = `
  # When adding additional environment variables, the schema in "/src/env.js"
  # should be updated accordingly.
  `
    .trim()
    .concat("\n")

  if (usingPrisma)
    content += `
  # Prisma
  # https://www.prisma.io/docs/reference/database-reference/connection-urls#env
  `

  if (usingPrisma) {
    if (databaseProvider === "mysql") {
      content += `DATABASE_URL="mysql://root:password@localhost:3306/${scopedAppName}"`
    } else if (databaseProvider === "postgresql") {
      // postgres user is default for postgresql
      content += `DATABASE_URL="postgresql://postgres:password@localhost:5432/${scopedAppName}"`
    } else if (databaseProvider === "sqlite") {
      content += 'DATABASE_URL="file:./db.sqlite"'
    }
    content += "\n"
  }

  if (usingNextAuth)
    content += `
  # Next Auth
  # You can generate a new secret on the command line with:
  # npx auth secret
  # https://next-auth.js.org/configuration/options#secret
  AUTH_SECRET=""

  # Next Auth Discord Provider
  DISCORD_CLIENT_ID=""
  DISCORD_CLIENT_SECRET=""
  `

  if (!usingNextAuth && !usingPrisma)
    content += `
  # Example:
  # SERVERVAR="foo"
  # NEXT_PUBLIC_CLIENTVAR="bar"
  `

  return content
}

const exampleEnvContent = `
  # Since the ".env" file is gitignored, you can use the ".env.example" file to
  # build a new ".env" file when you clone the repo. Keep this file up-to-date
  # when you add new variables to \`.env\`.

  # This file will be committed to version control, so make sure not to have any
  # secrets in it. If you are cloning this repo, create a copy of this file named
  # ".env" and populate it with your secrets.
  `
  .trim()
  .concat("\n\n")
